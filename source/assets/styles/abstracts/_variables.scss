// -----------------------------------------------------------------------------
// This file contains all application-wide Sass variables.
// -----------------------------------------------------------------------------

///
/// Representss the framework's name and the prefix of each component
/// @access public
/// @type String
$g-framework-name: 'evo' !default;

///
/// If true, the selector will be prefixed by the framework's prefix
/// @access public
/// @type boolean
$g-use-framework-prefix: true !default;

///
/// Helper variable that can be used within the provided naming mixins
/// @access private
/// @type Boolean
$g-no-prefix: false;

// -----------------------------------------------------------------------------
//                               FONTS
// -----------------------------------------------------------------------------

///
/// Represents the base font-family used by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type String
$g-framework-font-family: 'Roboto', sans-serif;

///
/// Represents the base font size used by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type Number
$g-framework-base-font-size:    16px;


///
/// Represents the base font size in rem used by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type Number
$g-framework-base-font-size-rem:  (16px / $g-framework-base-font-size) * 1rem;

///
/// Represents the base line-height used by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type Number
$g-framework-line-height: 1.5;

///
/// Represents the base font-weight used by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type Number
$g-framework-font-weight: 400;

///
/// Represents the global letter spacing value used by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type Number
$g-letter-spacing: 0.03em;

///
/// Represents the value of the global vertical rhythm by the Evolution framework.
/// You can exploit it in your components
/// @access public
/// @type Number
$g-vertical-rhythm: $g-framework-line-height * $g-framework-base-font-size-rem;

///
/// Represents the responsive modular scale for headings on large screen > (75em = 1200px)
///
/// @access public
/// @link http://www.modularscale.com/?1.25&em&1.33&web&text
/// @type MAP

$g-type-scale-large: (
  xx-large: 6.919rem,
  x-large: 5.202rem,
  h1: 3.911rem,
  h2: 2.941rem,
  h3: 2.211rem,
  h4: 1.663rem,
  p: 1.25rem,
  x-small: 0.94rem,
  xx-small: 0.707rem
);


///
/// Represents the responsive modular scale for headings on medium screen > (45em = 720px) < 75em
///
/// @access public
/// @link http://www.modularscale.com/?1.25&em&1.25&web&text
/// @type MAP

$g-type-scale-medium: (
  xx-large: 4.768rem,
  x-large: 3.815rem,
  h1: 3.052rem,
  h2: 2.441rem,
  h3: 1.953em,
  h4: 1.563rem,
  p: 1.25rem,
  x-small: 1rem,
  xx-small: 0.8rem
);


///
/// Represents the responsive modular scale for headings on small screen < (45em = 720px)
///
/// @access public
/// @link http://www.modularscale.com/?1.1&em&1.25&web&text
/// @type MAP

$g-type-scale-small: (
  xx-large: 4.196rem,
  x-large: 3.357rem,
  h1: 2.686rem,
  h2: 2.148rem,
  h3: 1.719rem,
  h4: 1.375rem,
  p: 1.1rem,
  x-small: 0.88rem,
  xx-small: 0.704rem
);

///
/// Represents the responsive breakpoint for medium screen (45em = 720px)
/// @access public
///
$g-breakpoint-medium: 75em;

///
/// Represents the responsive breakpoint for small screen (45em = 720px)
/// @access public
///
$g-breakpoint-small: 45em;


/// Represents the heading's margins (top and bottom) defined by Evolution UI
/// for maintaining a good vertical rhythm
/// @access public
/// @type Color
$g-heading-margin: ($g-vertical-rhythm * 2) 0 ($g-vertical-rhythm);


//@debug '#{$g-heading-margin}';

// -----------------------------------------------------------------------------
//                               COLORS PALETTE
// -----------------------------------------------------------------------------


///
/// Slightly lighten a color (Add percentage of white to a color)
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}

@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

///
/// Slightly darken a color (Add percentage of black to a color)
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

///
/// Represents the base colors palette used by the Evolution framework.
/// You can exploit it in your components.
/// Using the `get-color function you can extract a particular variant of a color
/// @link http://codepen.io/DrLeleMeo/full/oZdMQa/ - Evolution UI colors palette
///
/// @access public
/// @type MAP

$g-framework-colors: (
  'primary': (
    'base': #56c5de,
    'background': tint(#56c5de, 25%),
    'light': tint(#56c5de, 15%),
    'dark': shade(#56c5de, 15%),
    'darken': shade(#56c5de, 25%)
  ),
  'primary2': (
    'base': #6c8cd7,
    'background': tint(#6c8cd7, 25%),
    'light': tint(#6c8cd7, 15%),
    'dark': shade(#6c8cd7, 15%),
    'darken': shade(#6c8cd7, 25%)
  ),
  'accent': (
    'base': #a06ebd,
    'background': tint(#a06ebd, 25%),
    'light': tint(#a06ebd, 15%),
    'dark': shade(#a06ebd, 15%),
    'darken': shade(#a06ebd, 25%)
  ),
  'accent2': (
    'base': #e57b7b,
    'background': tint(#e57b7b, 25%),
    'light': tint(#e57b7b, 15%),
    'dark': shade(#e57b7b, 15%),
    'darken': shade(#e57b7b, 25%)
  ),
  'accent3': (
    'base': #ff9948,
    'light': tint(#ff9948, 15%),
    'dark': shade(#ff9948, 15%),
    'darken': shade(#ff9948, 25%)
  ),
  'accent4': (
    'base': #80d26b,
    'background': tint(#80d26b, 25%),
    'light': tint(#80d26b, 20%),
    'dark': shade(#80d26b, 15%),
    'darken': shade(#80d26b, 25%)
  ),
  'secondary': (
    'base': #768ba1,
    'background': tint(#768ba1, 25%),
    'light': tint(#768ba1, 15%),
    'dark': shade(#768ba1, 15%),
    'darken': shade(#768ba1, 25%)
  ),
  'background': (
    'base': #1e2226,
    'light': tint(#1e2226, 15%),
    'dark': shade(#1e2226, 15%)
  )
);

$_primaryConf: map-get($g-framework-colors, primary);
$_secondaryConf: map-get($g-framework-colors, secondary);
$_accent-1-Conf: map-get($g-framework-colors, accent);
$_accent-2-Conf: map-get($g-framework-colors, accent2);
$_accent-3-Conf: map-get($g-framework-colors, accent3);
$_accent-4-Conf: map-get($g-framework-colors, accent4);
$_backgroundConf: map-get($g-framework-colors, background);

///
/// Represents the primary color defined by the Evolution's Color Scheme.
/// You can use it in your components
/// @access public
/// @type Color
$g-color-primary: map-get($_primaryConf, base) !default;

///
/// Represents a color variation of the base primary color that can be used as
//  background color
/// @access public
/// @type Color
$g-color-primary-as-background: map-get($_primaryConf, background) !default;

///
/// Represents the light variation of the base primary color defined by the
/// Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-primary-light: map-get($_primaryConf, light) !default;

///
/// Represents a dark variation of the base primary color defined by the
/// Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-primary-dark: map-get($_primaryConf, dark) !default;

///
/// Represents a darker variation of the base primary color defined by the
/// Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-primary-darker: map-get($_primaryConf, darken) !default;

///
/// Represents the secondary color defined by the Evolution's Color Scheme.
//  You can use it in your components
/// @access public
/// @type Color
$g-color-secondary: map-get($_secondaryConf, base) !default;

///
/// Represents a color variation of the secondary color that can be used as
//  background color
/// @access public
/// @type Color
$g-color-secondary-as-background: map-get($_secondaryConf, background) !default;


///
/// Represents the light variation of the secondary color defined by the
/// Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-secondary-light: map-get($_secondaryConf, light) !default;

///
/// Represents a dark variation of the secondary color defined by the
/// Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-secondary-dark: map-get($_secondaryConf, dark) !default;

///
/// Represents a darker variation of the secondary color defined by the
/// Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-secondary-darker: map-get($_secondaryConf, darken) !default;

///
/// Represents the first accent color defined by the Evolution's Color Scheme.
/// You can use it in your components
/// @access public
/// @type Color
$g-color-accent-1: map-get($_accent-1-Conf, base) !default;

///
/// Represents a color variation of the first accent color that can be used as
//  background color
/// @access public
/// @type Color
$g-color-accent-1-as-background: map-get($_accent-1-Conf, background) !default;

///
/// Represents the light variation of the first accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-1-light: map-get($_accent-1-Conf, light) !default;

///
/// Represents a dark variation of the first accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-1-dark: map-get($_accent-1-Conf, dark) !default;

///
/// Represents a darker variation of the first accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-1-darker: map-get($_accent-1-Conf, darken) !default;

///
/// Represents the second accent color defined by the Evolution's Color Scheme.
/// You can use it in your components
/// @access public
/// @type Color
$g-color-accent-2: map-get($_accent-2-Conf, base) !default;

///
/// Represents a color variation of the second accent color that can be used as
//  background color
/// @access public
/// @type Color
$g-color-accent-2-as-background: map-get($_accent-2-Conf, background) !default;


///
/// Represents the light variation of the second accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-2-light: map-get($_accent-2-Conf, light) !default;

///
/// Represents a dark variation of the second accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-2-dark: map-get($_accent-2-Conf, dark) !default;

///
/// Represents a darker variation of the second accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-2-darker: map-get($_accent-2-Conf, darken) !default;

///
/// Represents the third accent color defined by the Evolution's Color Scheme.
/// You can use it in your components
/// @access public
/// @type Color
$g-color-accent-3: map-get($_accent-3-Conf, base) !default;


///
/// Represents the light variation of the third accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-3-light: map-get($_accent-3-Conf, light) !default;

///
/// Represents a dark variation of the third accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-3-dark: map-get($_accent-3-Conf, dark) !default;

///
/// Represents a darker variation of the third accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-3-darker: map-get($_accent-3-Conf, darken) !default;

///
/// Represents the fourth accent color defined by the Evolution's Color Scheme.
/// You can use it in your components
/// @access public
/// @type Color
$g-color-accent-4: map-get($_accent-4-Conf, base) !default;

///
/// Represents a color variation of the fourth accent color that can be used as
//  background color
/// @access public
/// @type Color
$g-color-accent-4-as-background: map-get($_accent-4-Conf, background) !default;


///
/// Represents the variation of the fourth accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-4-light: map-get($_accent-4-Conf, light) !default;

///
/// Represents a dark variation of the fourth accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-4-dark: map-get($_accent-4-Conf, dark) !default;

///
/// Represents a darker variation of the fourth accent color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-accent-4-darker: map-get($_accent-4-Conf, darken) !default;

///
/// Represents the background color defined by the Evolution's Color Scheme.
/// You can use it in your components
/// @access public
/// @type Color
$g-color-background: map-get($_backgroundConf, base) !default;

///
/// Represents the light variation of the background color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-background-light: map-get($_backgroundConf, light) !default;

///
/// Represents a dark variation of the background color defined
/// by the Evolution's Color Scheme. You can use it in your components
/// @access public
/// @type Color
$g-color-background-dark: map-get($_backgroundConf, dark) !default;

///
/// Represents the primary color for links
/// @access public
/// @type Color
$g-link-color: $g-color-accent-3;

///
/// Represents the primary color for links on hover
/// @access public
/// @type Color
$g-link-color-hover: darken($g-link-color, 15%);

///
/// Helper that can be used within the get-color function
/// @access private
/// @type MAP
$g-framework-colors-opacity: (
  'super-light': 0.9,
  'light': 0.8,
  'heavy': 0.4
);

// -----------------------------------------------------------------------------
//                               BORDERS
// -----------------------------------------------------------------------------

///
/// Represents the default border radius for the Evolution's components
/// @access public
/// @type Value
$g-framework-borders-radius: 4px;
